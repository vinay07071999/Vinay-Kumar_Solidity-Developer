
//implementation of a Token Airdrop Smart Contract in Solidity and a simple React webpage with Web3 integration for MetaMask connection.

Token Airdrop Smart Contract (Solidity):
solidity
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenAirdrop is Ownable {

    event Airdrop(address indexed token, uint256 amount, address[] recipients);
    event AirdropAmountModified(address indexed token, uint256 newAmount);

    modifier validAddress(address[] memory _recipients) {
        for (uint256 i = 0; i < _recipients.length; i++) {
            require(_recipients[i] != address(0), "Invalid recipient address");
        }
        _;
    }

    function executeAirdrop(address _token, uint256 _amount, address[] memory _recipients) external onlyOwner validAddress(_recipients) {
        require(_amount > 0, "Invalid airdrop amount");
        
        IERC20 token = IERC20(_token);
        for (uint256 i = 0; i < _recipients.length; i++) {
            require(token.transfer(_recipients[i], _amount), "Token transfer failed");
        }

        emit Airdrop(_token, _amount, _recipients);
    }

    function modifyAirdropAmount(address _token, uint256 _newAmount) external onlyOwner {
        require(_newAmount > 0, "Invalid airdrop amount");
        emit AirdropAmountModified(_token, _newAmount);
    }
}